- 함수 컴포넌트 === 함수
- 함수 컴포넌트는 상태 변화시 리렌더링됨
- 렌더링 시 함수 컴포넌트 내부 변수는 초기화됨
    - 초기화 : 새로운 객체 생성 + 메모리 주소 재할당 -> (객체 타입) 렌더링 전, 후의 변수는 다름
    - 위 경우 'useEffect' 는 의존성 배열은 객체 구분을 하지 못하고, 리렌더링 됨
    - 해결) 'useMemo', 'useCallback' -> 객체(함수)를 Memoization해주어 값을 필요할 때마다 사용
- 함수 === 객체
-

=============================================== [ useMemo ] ===============================================
- Optimization (최적화)
- Memoization -> 동일한 값을 리턴하는 함수를 메모리에 저장해, 필요 시 꺼내서 사용하는 방법 (자주 사용하는 값을 캐싱)
  - 메모리를 사용하므로 필요시에만 사용
  - 어떤 조건이 만족됐을 때만 변수들이 초기화 되도록 할 수 있음

*
const value = useMemo(()=>{
    return calculate();
},[item]);
- callback 함수 return '값'을 memoization
- callback : memoization '값' 계산해 리턴 => useMemo가 return하는 값
- 의존성 배열 : 배열내 요소의 값이 변할 때 callback 호출해 memoization 값을 변경한 뒤 다시 memoization
    - (비어있을 시) 컴포넌트 마운트시에만 계산

(기존)
렌더링 → Component 함수 호출 → 모든 내부 변수 초기화
function Component(){
    const value = calculate();
    return <div>{value}</div>;
}
function calculate(){
    return 10;
}

(useMemo)
렌더링 → Component 함수 호출, Memoization → 렌더링 → Component 함수 호출, Memoize된 값 재사용
function Component(){
    const value = useMemo(
    () => calculate(),[]
    );
    return <div>{value}</div>;
}
<Component />

[Data Type]
(Primitive)         (Object) 객체 타입
 - String            - Object
 - Number            - Array
 - Boolean             ...
 - Null
 - Undefined
 - BigInt
 - Symbol
=> 객체는 메모리에 저장되고, 변수는 그 메모리의 주소가 할당됨

=============================================== [ useCallback ] ===============================================
- Memoization
    - 자주 사용되는 값을 메모리에 저장해두어 계산할 필요 없이 가져와 사용하는 방법

*
useCallback(()=>{
  return value;
},[item])
- callback '함수'를 memoization
- callback 함수가 리렌더링 될 때마다 초기화 되는 것이 아니라, 메모리에 넣어두고 필요할 때마다 사용

* EX
const calculate = useCallback((num)=>{
    return num+1;
},[item]);
- calculate는 memoization된 함수를 가짐
- 의존성 배열이 변경되지 않는 이상 다시 초기화 되지 않음

=============================================== [useMemo, useCallback를 이용한 불필요한 렌더링 방지] ===============================================
React.memo (HOC, 고차 컴포넌트) -> 보통 컴포넌트를 받아 새로운(최적화된) 컴포넌트 반환
- Prop check
    - Prop에 변화가 있다면 렌더링
    - Prop에 변화가 없다면 렌더링 하지 않고 재사용

useMemo + useCallback
- 꼭 필요한 순간에만 렌더링 되도록 구현 -> 성능 향상!

(USAGE)
- React.memo는 오직 Prop Check에만 의존하는 최적화 방법
    - useState, useReducer, useContext를 사용한다면 Props 변화가 없더라고 리렌더링 됨
- 컴포넌트가 같은 Props로 자주 렌더링 될때
- 컴포넌트가 렌더링이 될때마다 복잡한 로직을 처리해야할때







